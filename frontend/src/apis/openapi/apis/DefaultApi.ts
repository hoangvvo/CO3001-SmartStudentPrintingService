/* tslint:disable */
/* eslint-disable */
/**
 * @fastify/swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 8.12.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePrinter200Response,
  CreatePrinterJob200Response,
  CreatePrinterJobRequest,
  CreatePrinterRequest,
  CreateUserFile200Response,
  GetCurrentUser200Response,
  ListPrinterJobs200Response,
  ListPrinters200Response,
  ListUserFiles200Response,
  UpdatePrinterRequest,
  UserLoginRequest,
  UserSignUpRequest,
} from '../models/index';
import {
    CreatePrinter200ResponseFromJSON,
    CreatePrinter200ResponseToJSON,
    CreatePrinterJob200ResponseFromJSON,
    CreatePrinterJob200ResponseToJSON,
    CreatePrinterJobRequestFromJSON,
    CreatePrinterJobRequestToJSON,
    CreatePrinterRequestFromJSON,
    CreatePrinterRequestToJSON,
    CreateUserFile200ResponseFromJSON,
    CreateUserFile200ResponseToJSON,
    GetCurrentUser200ResponseFromJSON,
    GetCurrentUser200ResponseToJSON,
    ListPrinterJobs200ResponseFromJSON,
    ListPrinterJobs200ResponseToJSON,
    ListPrinters200ResponseFromJSON,
    ListPrinters200ResponseToJSON,
    ListUserFiles200ResponseFromJSON,
    ListUserFiles200ResponseToJSON,
    UpdatePrinterRequestFromJSON,
    UpdatePrinterRequestToJSON,
    UserLoginRequestFromJSON,
    UserLoginRequestToJSON,
    UserSignUpRequestFromJSON,
    UserSignUpRequestToJSON,
} from '../models/index';

export interface CreatePrinterOperationRequest {
    createPrinterRequest: CreatePrinterRequest;
}

export interface CreatePrinterJobOperationRequest {
    createPrinterJobRequest: CreatePrinterJobRequest;
}

export interface DeletePrinterRequest {
    id: number;
}

export interface DeleteUserFileRequest {
    id: number;
}

export interface GetPrinterRequest {
    id: number;
}

export interface GetPrinterJobRequest {
    id: number;
}

export interface GetUserFileRequest {
    id: number;
}

export interface UpdatePrinterOperationRequest {
    id: number;
    updatePrinterRequest: UpdatePrinterRequest;
}

export interface UserLoginOperationRequest {
    userLoginRequest: UserLoginRequest;
}

export interface UserSignUpOperationRequest {
    userSignUpRequest: UserSignUpRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async createPrinterRaw(requestParameters: CreatePrinterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePrinter200Response>> {
        if (requestParameters.createPrinterRequest === null || requestParameters.createPrinterRequest === undefined) {
            throw new runtime.RequiredError('createPrinterRequest','Required parameter requestParameters.createPrinterRequest was null or undefined when calling createPrinter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/printers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePrinterRequestToJSON(requestParameters.createPrinterRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePrinter200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async createPrinter(requestParameters: CreatePrinterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePrinter200Response> {
        const response = await this.createPrinterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPrinterJobRaw(requestParameters: CreatePrinterJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePrinterJob200Response>> {
        if (requestParameters.createPrinterJobRequest === null || requestParameters.createPrinterJobRequest === undefined) {
            throw new runtime.RequiredError('createPrinterJobRequest','Required parameter requestParameters.createPrinterJobRequest was null or undefined when calling createPrinterJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/printer-jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePrinterJobRequestToJSON(requestParameters.createPrinterJobRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePrinterJob200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async createPrinterJob(requestParameters: CreatePrinterJobOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePrinterJob200Response> {
        const response = await this.createPrinterJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createUserFileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserFile200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/files/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserFile200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async createUserFile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserFile200Response> {
        const response = await this.createUserFileRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePrinterRaw(requestParameters: DeletePrinterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePrinter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/printers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePrinter(requestParameters: DeletePrinterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePrinterRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteUserFileRaw(requestParameters: DeleteUserFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUserFile(requestParameters: DeleteUserFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserFileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUser200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentUser200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUser200Response> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getPrinterRaw(requestParameters: GetPrinterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePrinter200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrinter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/printers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePrinter200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPrinter(requestParameters: GetPrinterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePrinter200Response> {
        const response = await this.getPrinterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPrinterJobRaw(requestParameters: GetPrinterJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePrinterJob200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrinterJob.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/printer-jobs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePrinterJob200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPrinterJob(requestParameters: GetPrinterJobRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePrinterJob200Response> {
        const response = await this.getPrinterJobRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserFileRaw(requestParameters: GetUserFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateUserFile200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserFile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/files/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserFile200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getUserFile(requestParameters: GetUserFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateUserFile200Response> {
        const response = await this.getUserFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPrinterJobsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPrinterJobs200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/printer-jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPrinterJobs200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async listPrinterJobs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPrinterJobs200Response> {
        const response = await this.listPrinterJobsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listPrintersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListPrinters200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/printers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPrinters200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async listPrinters(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListPrinters200Response> {
        const response = await this.listPrintersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async listUserFilesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListUserFiles200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/files/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListUserFiles200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async listUserFiles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListUserFiles200Response> {
        const response = await this.listUserFilesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePrinterRaw(requestParameters: UpdatePrinterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreatePrinter200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePrinter.');
        }

        if (requestParameters.updatePrinterRequest === null || requestParameters.updatePrinterRequest === undefined) {
            throw new runtime.RequiredError('updatePrinterRequest','Required parameter requestParameters.updatePrinterRequest was null or undefined when calling updatePrinter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/printers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePrinterRequestToJSON(requestParameters.updatePrinterRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePrinter200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async updatePrinter(requestParameters: UpdatePrinterOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreatePrinter200Response> {
        const response = await this.updatePrinterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userLoginRaw(requestParameters: UserLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUser200Response>> {
        if (requestParameters.userLoginRequest === null || requestParameters.userLoginRequest === undefined) {
            throw new runtime.RequiredError('userLoginRequest','Required parameter requestParameters.userLoginRequest was null or undefined when calling userLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginRequestToJSON(requestParameters.userLoginRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentUser200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async userLogin(requestParameters: UserLoginOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUser200Response> {
        const response = await this.userLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async userLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userLogoutRaw(initOverrides);
    }

    /**
     */
    async userSignUpRaw(requestParameters: UserSignUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCurrentUser200Response>> {
        if (requestParameters.userSignUpRequest === null || requestParameters.userSignUpRequest === undefined) {
            throw new runtime.RequiredError('userSignUpRequest','Required parameter requestParameters.userSignUpRequest was null or undefined when calling userSignUp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSignUpRequestToJSON(requestParameters.userSignUpRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentUser200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async userSignUp(requestParameters: UserSignUpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCurrentUser200Response> {
        const response = await this.userSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
